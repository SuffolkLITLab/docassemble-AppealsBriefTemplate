---
include:
  - docassemble.AssemblyLine:al_package.yml
  - docassemble.ALMassachusetts:al_massachusetts.yml
  - docassemble.MassAccess:massaccess.yml
  - docassemble.MassAppealsCourt:appeals-basic-questions.yml
  - appendix_template_weaver.yml
---
code: | 
  appeals_court = all_courts.matching_appeals_court("")
---
metadata:
  title: |
    Appeals Court Brief Template
  short title: |
    Appeals Court Brief Template
  tags:
    - Other
---
mandatory: True
comment: |
  This contains metadata that will not be overwritten if this YAML file is included in another
  file. Each file gets its own key in the interview_metadata dictionary.
  Most keys are not currently used at runtime, other than "allowed courts".
code: |
  interview_metadata
  if not defined("interview_metadata['appeals_brief_template']"):
    interview_metadata.initializeObject("appeals_brief_template")
    interview_metadata["appeals_brief_template"].update({
      "al_weaver_version": "1.0.2",
      "generated on": "2021-06-09",
      "title": "Appeals Court Brief Template",
      "short title": "Appeals Court Brief Template",
      "description": "Use this interview to set up an appeals brief template",
      "original_form": "https://www.mass.gov/service-details/appeals-court-briefs",
      "allowed courts": [
       "Boston Municipal Court",
       "District Court",
       "Superior Court",
       "Housing Court",
       "Probate and Family Court",
       "Juvenile Court",
       "Land Court" 
      ],
      "categories": [
      ],        
      "logic block variable": "interview_order_appeals_brief_template",
      "attachment block variable": "appeals_brief_template_attachment",
      "typical role": "unknown",
    })
---
code: |
  interview_short_title = "Set up an Appeals Court Brief"
---
code: |
  al_form_type = 'appeal'
---
objects:
  - users: | 
      ALPeopleList.using(there_are_any=True, complete_attribute='complete')
  - other_parties: | 
      ALPeopleList.using(there_are_any=True, complete_attribute='complete')
  - other_parties[i].attorneys: |       
        ALPeopleList.using(object_type=Individual, there_is_another=False, complete_attribute='complete') 
  - users[i].attorneys: |
      ALPeopleList.using(object_type=Individual, there_is_another=False, complete_attribute='complete') 
---
###auto_gather=False, target_number=1, gathered=True
---
sections:
  - review_appeals_brief_template: Review your answers
---
#################### Interview order ####################
comment: |
  Controls order and branching logic for questions specific to this form
id: interview_order_appeals_brief_template
code: |
  # Set the allowed courts for this interview
  allowed_courts = interview_metadata["appeals_brief_template"]["allowed courts"]
  nav.set_section('review_appeals_brief_template')
  # Below sets the user_role by asking a question.
  # You can set user_role directly instead to either 'plaintiff' or 'defendant'
  
  if pro_se_or_atty == 'attorney': 
    users[0].attorneys.there_are_any = True
  else: 
    users[0].attorneys.there_are_any = False
  user_ask_role
  if users_appeals_role == 'appellant':
    appellant_brief_or_reply
  defendants.gather()
  plaintiffs.gather()
  other_parties.gather()
  users.gather()

  
  set_progress(12.5)
  
  docket_number
  method_of_service

  set_progress(25.0)
  
  argument_contents
  summary_argument
  statement_of_case

  
  set_progress(37.5)

  statement_of_facts
  statement_of_issues
  conclusion_contents
  
  set_progress(50.0)
  
  trial_court
  #trial_court.address.address
  
  set_progress(62.5)
  
  set_parts(subtitle=str(users))
  
  
  interview_order_appeals_brief_template = True
---
###################### Main order ######################
comment: |
  This block includes the logic for standalone interviews.
  Delete mandatory: True to include in another interview
mandatory: True
code: |
  al_intro_screen
  appeals_brief_template_intro
  interview_order_appendix_template_weaver
  interview_order_appeals_brief_template
  signature_date
  # Save anonymized interview statistics (customize the saved data below)
  store_variables_snapshot(data={'zip': users[0].address.zip})
  appeals_brief_template_preview_question
  users[0].states_above_true
  basic_questions_signature_flow
  appeals_brief_template_download
---
comment: |
  This question is used to introduce your interview. Please customize
id: Appeals_Court_Brief_Template
continue button field: appeals_brief_template_intro
question: |
  Appeals Court Brief Template
subquestion: |
  Use this interview to set up an appeals brief template
---
id: pro se or atty
question: | 
  Are you representing yourself or are you an attorney representing someone else? 
field: pro_se_or_atty
choices:
  - I am representing myself: prose
  - I am an attorney representing someone else: attorney
---
id: argument
question: |
  Argument
subquestion: |
  contains the legal argument that supports the issues you are raising on appeal. Your legal argument must be supported by legal authority such as appellate case law, statutes, and/or regulations
fields:
  - "Argument subheading": argument_subheading
    required: False
  - "Argument contents": argument_contents
    input type: area
    required: False
---
id: summary 
question: |
  Summary of the Argument
subquestion: |
  If your argument section that follows is longer than 20 pages (or 4,500 words if produced in a proportionally spaced font), you must include a summary of the arguments made later in the brief, with page references to the pages at which each argument appears in the brief
fields:
  - no label: summary_argument
    input type: area
    required: False
---
id: Statement of the case
question: |
  Statement of the case
subquestion: |
  Relevant procedural history of what happened in the lower court in your case
fields:
  - no label: statement_of_case
    input type: area
    required: False
---
id: Statement of facts
question: |
  Statement of facts
subquestion: |
  Description of the relevant facts of your case. Importantly, every fact included in this statement must have support in the record appendix and must be followed by a page reference to the appendix or transcript where that fact appears
fields:
  - no label: statement_of_facts
    input type: area
    required: False
---
id: statement of the issue
question: |
  Statement of the issue
subquestion: |
  Issues raised in the brief and discussed in the argument section. The statement of issues is the first page of the substantive portion of your brief for purposes of the length limit.
fields:
  - no label: statement_of_issues
    input type: area
    required: False
---
id: appeals role
question: |
   What do you want to ask the Appeals court to do?
subquestion: |
  Do you want to ask the Appeals Court to reverse a Trial Court decision, or are you responding to the other party who asked the court to reverse the Trial Court?
fields:
  - no label: users_appeals_role
    datatype: radio
    choices:
      - I want to reverse the decision of the Trial Court: appellant
      - Prevent the other party from reversing the Trial Court decision: appellee
  - note: |
      Okay, you are the **Appellant** in the appeals court. The other side is the **Appellee**.
    show if:
      variable: users_appeals_role
      is: "appellant"
  - note: |
      Okay, you are the **Appellee** in the appeals court. The other side is the **Appellant**. 
    show if:
      variable: users_appeals_role
      is: "appellee"
help:
  label: |
    How do I know?
  content: |
    If you are the first person to file a form after trial court decision case,  you are the "Appellant".
    If you are responding to the other party, you are the "Appellee".
---
id: reply or start 
question: | 
  Is this your initial brief or your reply to the appellee
subquestion: | 
  You are the appellant. If you filed your initial brief and are responding to the other side's brief then it is the reply 
fields: 
  - no label: appellant_brief_or_reply
    datatype: radio
    choices: 
      - "Initial Brief": initial
      - "Reply Brief": reply
---
code: |
  if users == plaintiffs and users_appeals_role == 'appellant':
    plaintiff_appeals_role = 'Appellant'
    defendant_appeals_role = 'Appellee' 
  elif users == plaintiffs and users_appeals_role == 'appellee':
    plaintiff_appeals_role = 'Appellee'
    defendant_appeals_role = 'Appellant'
  elif users == defendants and users_appeals_role == 'appellant':
    defendant_appeals_role = 'Appellant'
    plaintiff_appeals_role = 'Appellee' 
  elif users == defendants and users_appeals_role == 'appellee':
    defendant_appeals_role = 'Appellee'
    plaintiff_appeals_role = 'Appellant'
---
id: attorney for user
question: |
  Does ${ users[i] } have an attorney?
yesno: users[i].attorneys.there_are_any
---
id: attorney for other parties
question: |
  Does ${ other_parties[i] } have an attorney?
yesno: other_parties[i].attorneys.there_are_any
---
id: other party attorney gather
code: |
  other_parties[i].attorneys[j].name.first
  other_parties[i].attorneys[j].name.last
  other_parties[i].attorneys[j].firm
  other_parties[i].attorneys[j].address.address
  other_parties[i].attorneys[j].mobile_number
  other_parties[i].attorneys[j].there_is_another = False
  other_parties[i].attorneys[j].complete = True
---
id: other party gather
code: | 
  if other_parties[i].person_type_label == 'Person':
    other_parties[i].name.first 
    other_parties[i].name.last
  else: 
    other_parties[i].business_name_label
  other_parties[i].attorneys.gather()
  if other_parties[i].attorneys.there_are_any == False: 
    other_parties[i].address.address
    other_parties[i].mobile_number
  other_parties[i].complete = True
---
id: users gather
code: | 
  users[i].name.first 
  users[i].name.last
  if users[i] == users[0]: 
    users[0].address.address    
  users[i].attorneys.gather()
  if users[i].attorneys.there_are_any == False: 
    users[i].address.address
    users[i].mobile_number
  users[i].complete = True
---
code: |
  users[i].attorneys[j].name.first
  users[i].attorneys[j].name.last
  users[i].attorneys[j].firm
  users[i].attorneys[j].address.address
  users[i].attorneys[j].mobile_number
  users[i].attorneys[j].there_is_another = False
  users[i].attorneys[j].complete = True
---
id: users i contact information
question: |
  Contact information for ${users[i] }
subquestion: |
  Provide at least one other way for the court to reach ${users[i] }. 
fields:
  - Mobile number: users[i].mobile_number
    required: False
  - Other phone number: users[i].phone_number
    required: False
  - Other ways to reach you: users[i].other_contact_method
    input type: area
    required: False
    help: |
      If you do not have a phone number or email the court can use, provide specific contact instructions. For example, use a friend's phone number.
      But the friend must be someone you can rely on to tell you the court is trying to reach you.
validation code: | 
  if not users[i].phone_number and not users[i].mobile_number and not users[i].other_contact_method:
    validation_error("You need to provide at least one other contact method.")
---
id: otherparties i contact information
question: |
  Contact information for ${other_parties[i] }
subquestion: |
  Provide at least one other way for the court to reach ${other_parties[i] }. 
fields:
  - Mobile number: other_parties[i].mobile_number
    required: False
  - Other phone number: other_parties[i].phone_number
    required: False
  - Other ways to reach ${other_parties[i] }: other_parties[i].other_contact_method
    input type: area
    required: False
    help: |
      If you do not have a phone number or email the court can use, provide specific contact instructions. For example, use a friend's phone number.
      But the friend must be someone you can rely on to tell you the court is trying to reach you.
---
id: other party attorney name
question: |
  What is the name of
  ${ other_parties[i].possessive('attorney') }?
fields:
  - First name: other_parties[i].attorneys[j].name.first
  - Last name: other_parties[i].attorneys[j].name.last
  - Firm name: other_parties[i].attorneys[j].firm
  - BBO Number: other_parties[i].attorneys[j].id_number
auto terms:
  BBO number: |
    Board of Bar Overseers, a regulatory board that tracks lawyers. All Massachusetts lawyers will have this number.
---
id: other parties attorney address
generic object: ALIndividual
sets:
  - other_parties[i].attorneys[j].email
  - other_parties[i].attorneys[j].address.address
  - other_parties[i].attorneys[j].address.city
  - other_parties[i].attorneys[j].address.zip
question: |
  What is **${ other_parties[i].attorneys[j] }'s** address?
fields:
  - Email address: other_parties[i].attorneys[j].email
    datatype: email
    required: false
  - code: |
      other_parties[i].attorneys[j].address_fields()
---
id: user attorney contact information
question: |
  Contact information for ${ users[i].attorneys[j].name }
subquestion: |
  Provide at least one other way for the court to reach ${ users[i].attorneys[j].name }.
fields:
  - Mobile number: users[i].attorneys[j].mobile_number
    required: False
  - Other phone number: users[i].attorneys[j].phone_number
    required: False
  - Other ways to reach ${ users[i].attorneys[j].name }: users[i].attorneys[j].other_contact_method
    input type: area
    required: False
    help: |
      If you do not have a phone number or email the court can use, provide specific contact instructions. For example, use a friend's phone number. But the friend must be someone you can rely on to tell you the court is trying to reach you.
validation code: | 
  if not users[i].attorneys[j].phone_number and not users[i].attorneys[j].mobile_number and not users[i].attorneys[j].other_contact_method:
    validation_error("You need to provide at least one other contact method.")
---
id: other party attorney contact information
question: |
  Contact information for ${ other_parties[i].attorneys[j] }
subquestion: |
  Provide at least one other way for the court to reach ${ other_parties[i].attorneys[j] }. 
fields:
  - Mobile number: other_parties[i].attorneys[j].mobile_number
    required: False
  - Other phone number: other_parties[i].attorneys[j].phone_number
    required: False
  - Other ways to reach ${ other_parties[i].attorneys[j] }: other_parties[i].attorneys[j].other_contact_method
    input type: area
    required: False
    help: |
      If you do not have a phone number or email the court can use, provide specific contact instructions. For example, use a friend's phone number. But the friend must be someone you can rely on to tell you the court is trying to reach you.
validation code: | 
  if not other_parties[i].attorneys[j].phone_number and not other_parties[i].attorneys[j].mobile_number and not other_parties[i].attorneys[j].other_contact_method:
    validation_error("You need to provide at least one other contact method.")
---
id: users attorney name
question: |
  % if pro_se_or_atty == 'attorney' and users[i] == users[0]: 
  What is your name?
  % else: 
  What is the name of
  ${ users[i].possessive('attorney') }?  
  % endif
fields:
  - First name: users[i].attorneys[j].name.first
  - Last name: users[i].attorneys[j].name.last
  - Firm name: users[i].attorneys[j].firm
  - BBO Number: users[i].attorneys[j].id_number
auto terms:
  BBO number: |
    Board of Bar Overseers, a regulatory board that tracks lawyers. All Massachusetts lawyers will have this number.
---
id: user attorney address
generic object: ALIndividual
sets:
  - users[i].attorneys[j].email
  - users[i].attorneys[j].address.address
  - users[i].attorneys[j].address.city
  - users[i].attorneys[j].address.zip
question: |
  % if pro_se_or_atty == 'attorney' and users[i] == users[0]:
  What is your address?
  % else: 
  What is **${ users[i].attorneys[j] }'s** address?
  % endif
fields:
  - Email address: users[i].attorneys[j].email
    required: False
  - code: |
      users[i].attorneys[j].address_fields()
---
id: your name
sets:
    - users[0].name.first
    - users[0].name.last
question:  |
  % if pro_se_or_atty == 'attorney': 
  What is your client's name?
  % else: 
  What is your name?
  % endif
fields:
  - code: |
      users[0].name_fields()
---
id: appeals user address
question: |
  % if pro_se_or_atty == 'attorney': 
  What is your client's address?
  % else: 
  What is your address?
  % endif
subquestion: |
  % if pro_se_or_atty == 'prose':  
  List the address where you want the court to mail papers to you.
  % endif
fields:
  - Email address: users[0].email    
    datatype: email
    required: False
  - Street address: users[0].address.address
    address autocomplete: True
  - Unit: users[0].address.unit
    required: False
  - City: users[0].address.city
  - State: users[0].address.state
    code: states_list()
  - Zip: users[0].address.zip 
---
id: method of service 
question: |
  How will you deliver the required copies of the motion, memorandum, and supporting materials to the other party(s) or their attorney(s)?
subquestion: |
  Select the method of delivery that you have used or will use to provide the required copies of the motion, memorandum and supporting materials to the other party(s) or their attorney(s).
  
  If the other party(s) do not have an attorney, you are required to serve a copy on the self-represented party.
field: method_of_service 
dropdown: 
  - eFile and serve (efilema.com): eFile and servie (efilema.com)
  - Email: email
  - Mail: mail
  - Hand delivery: hand delivery
---
id: conclusion
question: |
  Conclusion
subquestion: |
  Concise statement of the relief that you are asking the court to give you
fields:
  - no label: conclusion_contents
    input type: area
    required: False
---
# BRING THIS BACK IN IF ATTORNEY IS FILING OUT FORM, USE NARROWED LIST IF PRO SE
#id: trial court division abbreviated
#question: | 
#  Select the **Trial Court** department and division where your case was heard.
#fields:
#  - no label: trial_court
#    datatype: combobox
#    code: |
#      sorted((set([str(y) for y in all_courts.filter_courts(["District Court","Boston Municipal Court", "Probate and Family Court","Housing Court", "Superior Court", "Juvenile Court", "Land Court"])])))  
#    hint: To select one start typing or look through the list
---
id: affirmation and oath of no perjury
question: |
  Signing Under Oath
subquestion: |
  Your form must be signed under oath.
  That means everything you say must be true as far as you know.
  You may be punished by a judge if you intentionally
  say something that is not true.
fields:
  - no label: users[0].states_above_true
    datatype: checkboxes
    minlength: 1
    choices:
      - I affirm that the answers I have given are true, under the pains and penalties of perjury: states_true
    validation messages:
      minlength: |
        You cannot keep going unless you did your best to tell the truth.
---
id: preview appeals_brief_template
question: |
  Preview your form before you sign it
subquestion: |
  Here is a preview of the form you will sign on the next page.   
  
  ${ al_court_bundle.as_pdf(key='preview') }

  Click the image to open it in a new tab. Click the "Make changes" button
  to edit your answers.

  ${ action_button_html(url_action('review_appeals_brief_template'), label='Make changes', color='info') }
  
  Remember to come back to this window to continue and sign your form.
continue button field: appeals_brief_template_preview_question    
---
code: |
  # This is a placeholder for the addresses that will be searched
  # for matching address to court
  # TODO: is there a better default? Probably very case specific
  addresses_to_search = [(users[0].address)]
---
code: |
  signature_fields = []
---
id: appeals brief template review screen
event: review_appeals_brief_template
question: |
  Review your answers
review:
  - Edit: argument_contents
    button: |
      **Argument contents**:
      > ${ single_paragraph(argument_contents) }
  - Edit: attorneys.revisit
    button: |
      **attorneys**

      % for item in attorneys:
        * ${ item }
      % endfor
  - Edit: other_parties[i].attorneys[j].firm
    button: |
      **Attorney firm**:
      ${ other_parties[i].attorneys[j].firm }
  - Edit: plaintiff_appeals_role
    button: |
      **Plaintiff appeals role**:
      ${ plaintiff_appeals_role }
  - Edit: statement_of_case
    button: |
      **Statement of case**:
      > ${ single_paragraph(statement_of_case) }
  - Edit: statement_of_facts
    button: |
      **Statement of facts**:
      > ${ single_paragraph(statement_of_facts) }
  - Edit: statement_of_issues
    button: |
      **Statement of issues**:
      ${ statement_of_issues }
  - Edit: defendant_appeals_role
    button: |
      **Defendant appeals role**:
      ${ defendant_appeals_role }
  - Edit: method_of_service
    button: |
      **Method of service**:
      ${ method_of_service }
  - Edit: argument_subheading
    button: |
      **Argument subheading**:
      ${ argument_subheading }
  - Edit: conclusion_contents
    button: |
      **Conclusion contents**:
      > ${ single_paragraph(conclusion_contents) }
  - Edit: defendants.revisit
    button: |
      **defendants**

      % for item in defendants:
        * ${ item }
      % endfor
  - Edit: users.revisit
    button: |
      **users**

      % for item in users:
        * ${ item }
      % endfor
  - Edit: plaintiffs.revisit
    button: |
      **plaintiffs**

      % for item in plaintiffs:
        * ${ item }
      % endfor
  - Edit: trial_court
    button: |
      **trial_court**

      % if defined("trial_court.address.county"):
      * address: ${ trial_court.address.block() }
      % endif
      % if defined("trial_court.name.first"):
      * name: ${ trial_court.name.full() }
      % endif
  - Edit: docket_number
    button: |
      **docket_number**:
      ${ docket_number }
---
continue button field: attorneys.revisit
question: |
  Edit attorneys
subquestion: |
  ${ attorneys.table }

  ${ attorneys.add_action() }
---
table: attorneys.table
rows: attorneys
columns:
  - id_number: |
      row_item.id_number if defined("row_item.id_number") else ""
edit:
  - id_number
confirm: True

---
continue button field: defendants.revisit
question: |
  Edit defendants
subquestion: |
  ${ defendants.table }

  ${ defendants.add_action() }
---
table: defendants.table
rows: defendants
columns:
  - name: |
      row_item.name.full() if defined("row_item.name.first") else ""
edit:
  - name.first
confirm: True

---
continue button field: users.revisit
question: |
  Edit users
subquestion: |
  ${ users.table }

  ${ users.add_action() }
---
table: users.table
rows: users
columns:
  - phone_number: |
      row_item.phone_number if defined("row_item.phone_number") else ""
  - address: |
      row_item.address.block() if defined("row_item.address.address") else ""
  - name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - email: |
      row_item.email if defined("row_item.email") else ""
edit:
  - phone_number
  - address.address
  - name.first
  - email
confirm: True

---
continue button field: plaintiffs.revisit
question: |
  Edit plaintiffs
subquestion: |
  ${ plaintiffs.table }

  ${ plaintiffs.add_action() }
---
table: plaintiffs.table
rows: plaintiffs
columns:
  - name: |
      row_item.name.full() if defined("row_item.name.first") else ""
edit:
  - name.first
confirm: True

---
id: download appeals_brief_template
event: appeals_brief_template_download
question: |
  Your form is ready to download.
subquestion: |
  Thank you ${users}. Your form is ready to download and deliver.
  
  View, download and send your form below. Click the "Make changes" button to fix any mistakes.

  ${ action_button_html(url_action('review_appeals_brief_template'), label='Make changes', color='info') }
  
  
  ${ al_user_bundle.download_list_html() }
  

  ${ al_user_bundle.send_button_html(show_editable_checkbox=True) }

progress: 100
---
objects:
  - Post_interview_instructions: ALDocument.using(title="Instructions", filename="appeals_brief_template_next_steps.docx", enabled=True, has_addendum=False)
  - appeals_brief_template_attachment: ALDocument.using(title="Use this interview to set up an appeals brief template", filename="appeals_brief_template.docx", enabled=True, has_addendum=False)
  - Post_interview_instructions: ALDocument.using(title="Instructions", filename="appeals_brief_template_next_steps.docx", enabled=True, has_addendum=False)
  - appeals_brief_template_attachment: ALDocument.using(title="Use this interview to set up an appeals brief template", filename="appeals_brief_template.docx", enabled=True, has_addendum=False)
  - macourts: MACourtList.using(courts=['housing_courts','bmc','district_courts','superior_courts','land_court', 'juvenile_courts', 'probate_and_family_courts','appeals_court'])  # this is for lookups

---
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[Post_interview_instructions,appeals_brief_template_attachment, appendix_template_weaver_attachment], filename="appeals_brief_template_package.pdf", title="All forms to download for your records")
  - al_court_bundle: ALDocumentBundle.using(elements=[appeals_brief_template_attachment, appendix_template_weaver_attachment], filename="appeals_brief_template_package.pdf", title="All forms to download for your records")
---
attachments:
  - name: Post interview instructions
    filename: Post-interview-instructions     
    variable name: Post_interview_instructions[i]        
    docx template file: appeals_brief_template_next_steps.docx
  - name: appeals brief template attachment
    filename: appeals_brief_template     
    variable name: appeals_brief_template_attachment[i]        
    docx template file: appeals_brief_template.docx
  - name: Post interview instructions
    filename: Post-interview-instructions     
    variable name: Post_interview_instructions[i]        
    docx template file: appeals_brief_template_next_steps.docx
  - name: appeals brief template attachment
    filename: appeals_brief_template     
    variable name: appeals_brief_template_attachment[i]        
    docx template file: appeals_brief_template.docx